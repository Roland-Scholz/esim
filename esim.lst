
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	C:\github\esim\esim.a51
	Object File:	C:\github\esim\esim.hex
	List File:	C:\github\esim\esim.lst



 Line  I  Addr  Code            Source

    1:						$NOMOD51
    2:						$INCLUDE (89S52.MCU)
    3: 1			;   AT89S52 processor definition file
    4: 1			;   =================================
    5: 1
    6: 1	N	 80	P0	DATA	080H
    7: 1	N	 81	SP	DATA	081H
    8: 1	N	 82	DP0L	DATA	082H
    9: 1	N	 83	DP0H	DATA	083H
   10: 1	N	 84	DP1L	DATA	084H
   11: 1	N	 85	DP1H	DATA	085H
   12: 1	N	 87	PCON	DATA	087H
   13: 1	N	 88	TCON	DATA	088H
   14: 1	N	 89	TMOD	DATA	089H
   15: 1	N	 8A	TL0	DATA	08AH
   16: 1	N	 8B	TL1	DATA	08BH
   17: 1	N	 8C	TH0	DATA	08CH
   18: 1	N	 8D	TH1	DATA	08DH
   19: 1	N	 8E	AUXR	DATA	08EH
   20: 1	N	 90	P1	DATA	090H
   21: 1	N	 98	SCON	DATA	098H
   22: 1	N	 99	SBUF	DATA	099H
   23: 1	N	 A0	P2	DATA	0A0H
   24: 1	N	 A2	AUXR1	DATA	0A2H
   25: 1	N	 A6	WDTRST	DATA	0A6H
   26: 1	N	 A8	IE	DATA	0A8H
   27: 1	N	 B0	P3	DATA	0B0H
   28: 1	N	 B8	IP	DATA	0B8H
   29: 1	N	 C8	T2CON	DATA	0C8H
   30: 1	N	 C9	T2MOD	DATA	0C9H
   31: 1	N	 CA	RCAP2L	DATA	0CAH
   32: 1	N	 CB	RCAP2H	DATA	0CBH
   33: 1	N	 CC	TL2	DATA	0CCH
   34: 1	N	 CD	TH2	DATA	0CDH
   35: 1	N	 D0	PSW	DATA	0D0H
   36: 1	N	 E0	ACC	DATA	0E0H
   37: 1	N	 F0	B	DATA	0F0H
   38: 1
   39: 1	N	 88	IT0	BIT	088H
   40: 1	N	 89	IE0	BIT	089H
   41: 1	N	 8A	IT1	BIT	08AH
   42: 1	N	 8B	IE1	BIT	08BH
   43: 1	N	 8C	TR0	BIT	08CH

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44: 1	N	 8D	TF0	BIT	08DH
   45: 1	N	 8E	TR1	BIT	08EH
   46: 1	N	 8F	TF1	BIT	08FH
   47: 1	N	 90	T2	BIT	090H
   48: 1	N	 91	T2EX	BIT	091H
   49: 1	N	 95	MOSI	BIT	095H
   50: 1	N	 96	MISO	BIT	096H
   51: 1	N	 97	SCK	BIT	097H
   52: 1	N	 98	RI	BIT	098H
   53: 1	N	 99	TI	BIT	099H
   54: 1	N	 9A	RB8	BIT	09AH
   55: 1	N	 9B	TB8	BIT	09BH
   56: 1	N	 9C	REN	BIT	09CH
   57: 1	N	 9D	SM2	BIT	09DH
   58: 1	N	 9E	SM1	BIT	09EH
   59: 1	N	 9F	SM0	BIT	09FH
   60: 1	N	 A8	EX0	BIT	0A8H
   61: 1	N	 A9	ET0	BIT	0A9H
   62: 1	N	 AA	EX1	BIT	0AAH
   63: 1	N	 AB	ET1	BIT	0ABH
   64: 1	N	 AC	ES	BIT	0ACH
   65: 1	N	 AD	ET2	BIT	0ADH
   66: 1	N	 AF	EA	BIT	0AFH
   67: 1	N	 B0	RXD	BIT	0B0H
   68: 1	N	 B1	TXD	BIT	0B1H
   69: 1	N	 B2	INT0	BIT	0B2H
   70: 1	N	 B3	INT1	BIT	0B3H
   71: 1	N	 B4	T0	BIT	0B4H
   72: 1	N	 B5	T1	BIT	0B5H
   73: 1	N	 B6	WR	BIT	0B6H
   74: 1	N	 B7	RD	BIT	0B7H
   75: 1	N	 B8	PX0	BIT	0B8H
   76: 1	N	 B9	PT0	BIT	0B9H
   77: 1	N	 BA	PX1	BIT	0BAH
   78: 1	N	 BB	PT1	BIT	0BBH
   79: 1	N	 BC	PS	BIT	0BCH
   80: 1	N	 BD	PT2	BIT	0BDH
   81: 1	N	 C8	CPRL2	BIT	0C8H
   82: 1	N	 C9	CT2	BIT	0C9H
   83: 1	N	 CA	TR2	BIT	0CAH
   84: 1	N	 CB	EXEN2	BIT	0CBH
   85: 1	N	 CC	TCLK	BIT	0CCH
   86: 1	N	 CD	RCLK	BIT	0CDH
   87: 1	N	 CE	EXF2	BIT	0CEH
   88: 1	N	 CF	TF2	BIT	0CFH
   89: 1	N	 D0	P	BIT	0D0H
   90: 1	N	 D2	OV	BIT	0D2H
   91: 1	N	 D3	RS0	BIT	0D3H
   92: 1	N	 D4	RS1	BIT	0D4H
   93: 1	N	 D5	F0	BIT	0D5H
   94: 1	N	 D6	AC	BIT	0D6H
   95: 1	N	 D7	CY	BIT	0D7H
   96: 1
   97: 1	N      0000	RESET	CODE	000H
   98: 1	N      0003	EXTI0	CODE	003H
   99: 1	N      000B	TIMER0	CODE	00BH

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

  100: 1	N      0013	EXTI1	CODE	013H
  101: 1	N      001B	TIMER1	CODE	01BH
  102: 1	N      0023	SINT	CODE	023H
  103: 1	N      002B	TIMER2	CODE	02BH
  104:						$INCLUDE (PAULMON.INC)
  105: 1	N      002E	phex1		EQU 002Eh		;print a single hex digit
  106: 1	N      0030	cout		EQU 0030h            	;Send Acc to serial port
  107: 1	N      0032	cin		EQU 0032h             	;Get Acc from serial port
  108: 1	N      0034	phex		EQU 0034h            	;Print Hex value of Acc
  109: 1	N      0036	phex16		EQU 0036h          	;Print Hex value of DPTR
  110: 1	N      0038	pstr		EQU 0038h            	;Print string pointed to by DPTR,
  111: 1			                                	;must be terminated by 0 or a high bit set
  112: 1			                                	;pressing ESC will stop the printing
  113: 1	N      003A	ghex		EQU 003Ah            	;Get Hex input into Acc
  114: 1			                                	;Carry set if ESC has been pressed
  115: 1	N      003C	ghex16		EQU 003Ch          	;Get Hex input into DPTR
  116: 1			                                	;Carry set if ESC has been pressed
  117: 1	N      003E	esc		EQU 003Eh             	;Check for ESC key
  118: 1								;Carry set if ESC has been pressed
  119: 1	N      0040	upper		EQU 0040h           	;Convert Acc to uppercase
  120: 1								;Non-ASCII values are unchanged
  121: 1	N      0042	autobaud	EQU 0042h        	;Initialize serial port
  122: 1	N      0045	pcstr		EQU 0045h		;print string in compressed format (no docs)
  123: 1	N      0045	pcstr_h		EQU 0045h
  124: 1	N      0048	newline		EQU 0048h		;print CR/LF (13 and 10)
  125: 1	N      004A	lenstr		EQU 004Ah		;return the length of a string @DPTR (in R0)
  126: 1	N      004D	pint8u		EQU 004Dh		;print Acc at an integer, 0 to 255
  127: 1	N      0050	pint8		EQU 0050h		;print Acc at an integer, -128 to 127
  128: 1	N      0053	pint16u		EQU 0053h		;print DPTR as an integer, 0 to 65535
  129: 1	N      0056	smart_wr	EQU 0056h		;write Acc @DPTR (RAM or flash), C=1 if error
  130: 1	N      0059	prgm		EQU 0059h		;write Acc @DPTR to Flash ROM, C=1 if error
  131: 1	N      005C	erall		EQU 005Ch		;erase the Flash ROM chip, C=1 if error
  132: 1	N      005F	find		EQU 005Fh		;find next prog header in memory
  133: 1	N      0062	cin_filter	EQU 0062h		;like cin, but scan for arrow keys, pgup/pgdn
  134: 1	N      0065	asc2hex		EQU 0065h		;convert character 0-9,A-F to number 0-15.
  135:
  136:				;WRITEREG	EQU	P3.2			;violett
  137:				;REGA		EQU	P3.3			;gray
  138:				;REGB		EQU	P3.4			;violett
  139:				;WRITERAM	EQU	P3.5			;green
  140:
  141:		B      00B2	RAMCE		EQU	P3.2			;RAM CE signal
  142:		B      00B3	RAMWE		EQU	P3.3			;RAM write signal
  143:		B      00B4	SIM		EQU	P3.4			;0 = SIM, 1=write RAM
  144:
  145:
  146:				; REGB	REGA	register
  147:				; 0	0	ADRHI
  148:				; 0	1	ADRLO
  149:				; 1	0	DATA
  150:				; 1	1	ESIMENABLE
  151:
  152:		D      0082	dpl		EQU	dp0l
  153:		D      0083	dph		EQU	dp0h
  154:
  155:		N      1000	LOCAT		EQU	01000h

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  156:
  157:				;		ORG	1000h
  158:
  159:		N      1000			ORG    LOCAT
  160:	  1000	A5 E5 E0 A5			DB     0A5H,0E5H,0E0H,0A5H     ;SIGNITURE BYTES
  161:	  1004	23 00 00 00			DB     35,0,0,0                ;ID (35=PROG), id (253=startup)
  162:	  1008	00 00 00 00			DB     0,0,0,0                 ;PROMPT CODE VECTOR
  163:	  100C	00 00 00 00			DB     0,0,0,0                 ;RESERVED
  164:	  1010	00 00 00 00			DB     0,0,0,0                 ;RESERVED
  165:	  1014	00 00 00 00			DB     0,0,0,0                 ;RESERVED
  166:	  1018	00 00 00 00			DB     0,0,0,0                 ;USER DEFINED
  167:	  101C	FF FF FF FF			DB     255,255,255,255         ;LENGTH AND CHECKSUM (255=UNUSED)
  168:	  1020	45 70 72 6F			DB     "Eprom Simulator 8k",0  ;MAX 31 CHARACTERS, PLUS THE ZERO
	  1024	6D 20 53 69
	  1028	6D 75 6C 61
	  102C	74 6F 72 20
	  1030	38 6B 00
  169:
  170:		N      1040			ORG    LOCAT+64                ;EXECUTABLE CODE BEGINS HERE
  171:
  172:	  1040	11 56				ACALL	INITPORTS
  173:
  174:	  1042	90 12 26	MENU:		MOV	DPTR,#MSGMENU
  175:	  1045	12 00 38			CALL	PSTR
  176:	  1048	12 00 32	MENULOOP:	CALL	CIN
  177:	  104B	B4 64 04	MENUD:		CJNE	A,#"d",MENUX
  178:	  104E	11 72				ACALL	WRITEHEX
  179:	  1050	01 42				AJMP	MENU
  180:	  1052	B4 78 F3	MENUX:		CJNE	A,#"x",MENULOOP
  181:	  1055	22				RET
  182:
  183:	  1056	75 80 FF	INITPORTS:	MOV	P0, #255
  184:	  1059	75 90 FF			MOV	P1, #255
  185:	  105C	75 A0 FF			MOV	P2, #255
  186:	  105F	75 B0 FF			MOV	P3, #255
  187:	  1062	C2 B4				CLR	SIM
  188:	  1064	22				RET
  189:
  190:	  1065	F5 A0		WRITEADRHI:	MOV	P2, A
  191:	  1067	22				RET
  192:
  193:	  1068	F5 90		WRITEADRLO:	MOV	P1, A
  194:	  106A	22				RET
  195:
  196:	  106B	F5 80		WRITEDATA:	MOV	P0, A
  197:	  106D	C2 B3				CLR	RAMWE
  198:	  106F	D2 B3				SETB	RAMWE
  199:	  1071	22				RET
  200:
  201:
  202:	  1072	75 B0 FF	WRITEHEX:	MOV	P3, #255		;enable ESIM
  203:	  1075	C2 B2				CLR	RAMCE
  204:	  1077	11 7D				ACALL	dnld
  205:	  1079	D2 B2				SETB	RAMCE
  206:	  107B	01 56				AJMP	INITPORTS
  207:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  208:
  209:	  107D			dnld:
  210:	  107D	90 12 62			mov	dptr, #dnlds1
  211:	  1080	12 00 45			call	pcstr_h		   ;"begin sending file <ESC> to abort"
  212:	  1083	51 06				acall	dnld_init
  213:
  214:					  ;look for begining of line marker ':'
  215:	  1085	12 00 32	dnld1:		call	cin
  216:	  1088	B4 1B 02			cjne	a, #27, dnld2	;Test for escape
  217:	  108B	21 16				ajmp	dnld_esc
  218:
  219:	  108D	B4 3A 02	dnld2:		cjne	a, #':', dnld2b
  220:	  1090	80 12				sjmp	dnld2d
  221:	  1092			dnld2b:	  ;check to see if it's a hex digit, error if it is
  222:	  1092	12 00 65			call	asc2hex
  223:	  1095	40 EE				jc	dnld1
  224:	  1097	79 06				mov	r1, #6
  225:	  1099	31 29				acall	dnld_inc
  226:	  109B	80 E8				sjmp	dnld1
  227:
  228:	  109D			dnld_now: ;entry point for main menu detecting ":" character
  229:	  109D	74 5E				mov	a, #'^'
  230:	  109F	12 00 30			call	cout
  231:	  10A2	51 06				acall	dnld_init
  232:
  233:	  10A4	79 00		dnld2d:		mov	r1, #0
  234:	  10A6	31 29				acall	dnld_inc
  235:
  236:					  ;begin taking in the line of data
  237:	  10A8	74 2E		dnld3:		mov	a, #'.'
  238:	  10AA	12 00 30			call	cout
  239:	  10AD	7C 00				mov	r4, #0		;r4 will count up checksum
  240:	  10AF	31 48				acall	dnld_ghex
  241:	  10B1	F8				mov	r0, a		;R0 = # of data bytes
  242:				;	mov	a, #'.'
  243:				;	acall	cout
  244:	  10B2	31 48				acall	dnld_ghex
  245:	  10B4	F5 83		dnld3_b:	mov	dp0h, a		;High byte of load address
  246:	  10B6	31 48				acall	dnld_ghex
  247:	  10B8	F5 82				mov	dp0l, a		;Low byte of load address
  248:	  10BA	31 48				acall	dnld_ghex	;Record type
  249:	  10BC	B4 01 02			cjne	a, #1, dnld4	;End record?
  250:	  10BF	80 37				sjmp	dnld_end
  251:	  10C1	70 2C		dnld4:		jnz	dnld_unknown	;is it a unknown record type???
  252:	  10C3	E8		dnld5:		mov	a, r0
  253:	  10C4	60 1B				jz	dnld_get_cksum
  254:	  10C6	31 48				acall	dnld_ghex	;Get data byte
  255:	  10C8	FA				mov	r2, a
  256:	  10C9	79 01				mov	r1, #1
  257:	  10CB	31 29				acall	dnld_inc	;count total data bytes received
  258:
  259:						;lcall	smart_wr	;c=1 if an error writing
  260:	  10CD	E5 82				MOV	A, dp0l
  261:	  10CF	11 68				ACALL	WRITEADRLO
  262:	  10D1	E5 83				MOV	A, dp0h
  263:	  10D3	11 65				ACALL	WRITEADRHI

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  264:	  10D5	EA				mov	a, r2
  265:	  10D6	11 6B				ACALL	WRITEDATA
  266:
  267:	  10D8	E4				clr	a
  268:	  10D9	34 02				addc	a, #2
  269:	  10DB	F9				mov	r1, a
  270:				;     2 = bytes written
  271:				;     3 = bytes unable to write
  272:	  10DC	31 29				acall	dnld_inc
  273:	  10DE	A3				inc	dptr
  274:	  10DF	D8 E2				djnz	r0, dnld5
  275:	  10E1			dnld_get_cksum:
  276:	  10E1	31 48				acall	dnld_ghex	;get checksum
  277:	  10E3	EC				mov	a, r4
  278:	  10E4	60 9F				jz	dnld1		;should always add to zero
  279:	  10E6			dnld_sumerr:
  280:	  10E6	12 00 34			CALL	PHEX
  281:	  10E9	79 04				mov	r1, #4
  282:	  10EB	31 29				acall	dnld_inc	;all we can do it count # of cksum errors
  283:	  10ED	80 96				sjmp	dnld1
  284:
  285:	  10EF			dnld_unknown:	;handle unknown line type
  286:	  10EF	E8				mov	a, r0
  287:	  10F0	60 EF				jz	dnld_get_cksum	;skip data if size is zero
  288:	  10F2			dnld_ukn2:
  289:	  10F2	31 48				acall	dnld_ghex	;consume all of unknown data
  290:	  10F4	D8 FC				djnz	r0, dnld_ukn2
  291:	  10F6	80 E9				sjmp	dnld_get_cksum
  292:
  293:	  10F8			dnld_end:   ;handles the proper end-of-download marker
  294:	  10F8	E8				mov	a, r0
  295:	  10F9	60 04				jz	dnld_end_3	;should usually be zero
  296:	  10FB			dnld_end_2:
  297:	  10FB	31 48				acall	dnld_ghex	;consume all of useless data
  298:	  10FD	D8 F3				djnz	r0, dnld_ukn2
  299:	  10FF			dnld_end_3:
  300:	  10FF	31 48				acall	dnld_ghex	;get the last checksum
  301:	  1101	EC				mov	a, r4
  302:	  1102	70 E2				jnz	dnld_sumerr
  303:	  1104	31 20				acall	dnld_dly
  304:	  1106	90 12 81			mov	dptr, #dnlds3
  305:	  1109	12 00 45			call	pcstr_h		   ;"download went ok..."
  306:					;consume any cr or lf character that may have been
  307:					;on the end of the last line
  308:	  110C	20 98 02			jb	ri, dnld_end_4
  309:	  110F	21 93				ajmp	dnld_sum
  310:	  1111			dnld_end_4:
  311:	  1111	12 00 32			call	cin
  312:	  1114	80 7D				sjmp	dnld_sum
  313:
  314:
  315:
  316:	  1116			dnld_esc:   ;handle esc received in the download stream
  317:	  1116	31 20				acall	dnld_dly
  318:	  1118	90 12 79			mov	dptr, #dnlds2
  319:	  111B	12 00 45			call	pcstr_h		   ;"download aborted."

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



 Line  I  Addr  Code            Source

  320:	  111E	80 73				sjmp	dnld_sum
  321:
  322:	  1120			dnld_dly:   ;a short delay since most terminal emulation programs
  323:					    ;won't be ready to receive anything immediately after
  324:					    ;they've transmitted a file... even on a fast Pentium(tm)
  325:					    ;machine with 16550 uarts!
  326:	  1120	78 00				mov	R0,#0
  327:	  1122	79 00		dnlddly2:	mov	R1,#0
  328:	  1124	D9 FE				djnz	r1, $		;roughly 128k cycles, appox 0.1 sec
  329:	  1126	D8 FA				djnz	r0, dnlddly2
  330:	  1128	22				ret
  331:
  332:	  1129			dnld_inc:     ;increment parameter specified by R1
  333:					      ;note, values in Acc and R1 are destroyed
  334:	  1129	E9				mov	a, r1
  335:	  112A	54 07				anl	a, #00000111b	;just in case
  336:	  112C	23				rl	a
  337:	  112D	24 EC				add	a, #dnld_parm
  338:	  112F	F9				mov	r1, a		;now r1 points to lsb
  339:	  1130	07				inc	@r1
  340:	  1131	E7				mov	a, @r1
  341:	  1132	70 02				jnz	dnldin2
  342:	  1134	09				inc	r1
  343:	  1135	07				inc	@r1
  344:	  1136	22		dnldin2:	ret
  345:
  346:	  1137			dnld_gp:     ;get parameter, and inc to next one (@r1)
  347:					     ;carry clear if parameter is zero.
  348:					     ;16 bit value returned in dptr
  349:	  1137	D3				setb	c
  350:	  1138	87 82				mov	dp0l, @r1
  351:	  113A	09				inc	r1
  352:	  113B	87 83				mov	dp0h, @r1
  353:	  113D	09				inc	r1
  354:	  113E	E5 82				mov	a, dp0l
  355:	  1140	70 05				jnz	dnldgp2
  356:	  1142	E5 83				mov	a, dph
  357:	  1144	70 01				jnz	dnldgp2
  358:	  1146	C3				clr	c
  359:	  1147	22		dnldgp2:	ret
  360:
  361:				;a spacial version of ghex just for the download.  Does not
  362:				;look for carriage return or backspace.	 Handles ESC key by
  363:				;poping the return address (I know, nasty, but it saves many
  364:				;bytes of code in this 4k ROM) and then jumps to the esc
  365:				;key handling.	This ghex doesn't echo characters, and if it
  366:				;sees ':', it pops the return and jumps to an error handler
  367:				;for ':' in the middle of a line.  Non-hex digits also jump
  368:				;to error handlers, depending on which digit.
  369:
  370:	  1148			dnld_ghex:
  371:	  1148	12 00 32	dnldgh1:	call	cin
  372:	  114B	12 00 40			call	upper
  373:	  114E	B4 1B 06			cjne	a, #27, dnldgh3
  374:	  1151	D0 E0		dnldgh2:	pop	acc
  375:	  1153	D0 E0				pop	acc

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8



 Line  I  Addr  Code            Source

  376:	  1155	80 BF				sjmp	dnld_esc
  377:	  1157	B4 3A 0A	dnldgh3:	cjne	a, #':', dnldgh5
  378:	  115A	79 05		dnldgh4:	mov	r1, #5		;handle unexpected beginning of line
  379:	  115C	31 29				acall	dnld_inc
  380:	  115E	D0 E0				pop	acc
  381:	  1160	D0 E0				pop	acc
  382:	  1162	01 A8				ajmp	dnld3		;and now we're on a new line!
  383:	  1164	12 00 65	dnldgh5:	call	asc2hex
  384:	  1167	50 06				jnc	dnldgh6
  385:	  1169	79 07				mov	r1, #7
  386:	  116B	31 29				acall	dnld_inc
  387:	  116D	80 D9				sjmp	dnldgh1
  388:	  116F	FA		dnldgh6:	mov	r2, a		;keep first digit in r2
  389:	  1170	12 00 32	dnldgh7:	call	cin
  390:	  1173	12 00 40			call	upper
  391:	  1176	B4 1B 02			cjne	a, #27, dnldgh8
  392:	  1179	80 D6				sjmp	dnldgh2
  393:	  117B	B4 3A 02	dnldgh8:	cjne	a, #':', dnldgh9
  394:	  117E	80 DA				sjmp	dnldgh4
  395:	  1180	12 00 65	dnldgh9:	call	asc2hex
  396:	  1183	50 06				jnc	dnldghA
  397:	  1185	79 07				mov	r1, #7
  398:	  1187	31 29				acall	dnld_inc
  399:	  1189	80 E5				sjmp	dnldgh7
  400:	  118B	CA		dnldghA:	xch	a, r2
  401:	  118C	C4				swap	a
  402:	  118D	4A				orl	a, r2
  403:	  118E	FA				mov	r2, a
  404:	  118F	2C				add	a, r4		;add into checksum
  405:	  1190	FC				mov	r4, a
  406:	  1191	EA				mov	a, r2		;return value in acc
  407:	  1192	22				ret
  408:
  409:				;dnlds4 =  "Summary:"
  410:				;dnlds5 =  " lines received"
  411:				;dnlds6a = " bytes received"
  412:				;dnlds6b = " bytes written"
  413:
  414:	  1193			dnld_sum:    ;print out download summary
  415:	  1193	EE				mov	a, r6
  416:	  1194	C0 E0				push	acc
  417:	  1196	EF				mov	a, r7
  418:	  1197	C0 E0				push	acc
  419:	  1199	90 12 88			mov	dptr, #dnlds4
  420:	  119C	12 00 45			call	pcstr_h
  421:	  119F	79 EC				mov	r1, #dnld_parm
  422:	  11A1	7E 91				mov	r6, #LOW dnlds5
  423:	  11A3	7F 12				mov	r7, #HIGH dnlds5
  424:	  11A5	51 02				acall	dnld_i0
  425:	  11A7	7E 97				mov	r6, #LOW dnlds6a
  426:	  11A9	7F 12				mov	r7, #HIGH dnlds6a
  427:	  11AB	51 02				acall	dnld_i0
  428:	  11AD	7E 9C				mov	r6, #LOW dnlds6b
  429:	  11AF	7F 12				mov	r7, #HIGH dnlds6b
  430:	  11B1	51 02				acall	dnld_i0
  431:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 9



 Line  I  Addr  Code            Source

  432:	  11B3			dnld_err:    ;now print out error summary
  433:	  11B3	7A 05				mov	r2, #5
  434:	  11B5	31 37		dnlder2:	acall	dnld_gp
  435:	  11B7	40 0A				jc	dnlder3		;any errors?
  436:	  11B9	DA FA				djnz	r2, dnlder2
  437:					 ;no errors, so we print the nice message
  438:	  11BB	90 12 D8			mov	dptr, #dnlds13
  439:	  11BE	12 00 45			call	pcstr_h
  440:	  11C1	80 26				sjmp	dlnd_sum_done
  441:
  442:	  11C3			dnlder3:  ;there were errors, so now we print 'em
  443:	  11C3	90 12 A7			mov	dptr, #dnlds7
  444:	  11C6	12 00 45			call	pcstr_h
  445:					  ;but let's not be nasty... only print if necessary
  446:	  11C9	79 F2				mov	r1, #(dnld_parm+6)
  447:	  11CB	7E AB				mov	r6, #LOW dnlds8
  448:	  11CD	7F 12				mov	r7, #HIGH dnlds8
  449:	  11CF	31 F2				acall	dnld_item
  450:	  11D1	7E BC				mov	r6, #LOW dnlds9
  451:	  11D3	7F 12				mov	r7, #HIGH dnlds9
  452:	  11D5	31 F2				acall	dnld_item
  453:	  11D7	7E C4				mov	r6, #LOW dnlds10
  454:	  11D9	7F 12				mov	r7, #HIGH dnlds10
  455:	  11DB	31 F2				acall	dnld_item
  456:	  11DD	7E CA				mov	r6, #LOW dnlds11
  457:	  11DF	7F 12				mov	r7, #HIGH dnlds11
  458:	  11E1	31 F2				acall	dnld_item
  459:	  11E3	7E CF				mov	r6, #LOW dnlds12
  460:	  11E5	7F 12				mov	r7, #HIGH dnlds12
  461:	  11E7	31 F2				acall	dnld_item
  462:	  11E9			dlnd_sum_done:
  463:	  11E9	D0 E0				pop	acc
  464:	  11EB	FF				mov	r7, a
  465:	  11EC	D0 E0				pop	acc
  466:	  11EE	FE				mov	r6, a
  467:	  11EF	02 00 48			jmp	newline
  468:
  469:	  11F2			dnld_item:
  470:	  11F2	31 37				acall	dnld_gp		;error conditions
  471:	  11F4	50 0B				jnc	dnld_i3
  472:	  11F6	12 12 0F	dnld_i2:call	space
  473:	  11F9	12 00 53			lcall	pint16u
  474:	  11FC	51 14				acall	r6r7todptr
  475:	  11FE	12 00 45			call	pcstr_h
  476:	  1201	22		dnld_i3:	ret
  477:
  478:	  1202	31 37		dnld_i0:	acall	dnld_gp		;non-error conditions
  479:	  1204	80 F0				sjmp	dnld_i2
  480:
  481:
  482:	  1206			dnld_init:
  483:					;init all dnld parms to zero.
  484:	  1206	78 EC				mov	r0, #dnld_parm
  485:	  1208	76 00		dnld0:		mov	@r0, #0
  486:	  120A	08				inc	r0
  487:	  120B	B8 FC FA			cjne	r0, #dnld_parm + 16, dnld0

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 10



 Line  I  Addr  Code            Source

  488:	  120E	22				ret
  489:
  490:	  120F	74 20		space:		mov	a, #' '
  491:	  1211	02 00 30			JMP	COUT
  492:
  493:	  1214			r6r7todptr:
  494:	  1214	8E 82				mov	dpl, r6
  495:	  1216	8F 83				mov	dph, r7
  496:	  1218	22				ret
  497:
  498:
  499:	  1219	7E 00		TIME35MS:	MOV	R6,#0
  500:	  121B	7F 00		TIME35MS2:	MOV	R7,#0
  501:	  121D	DF FE		TIME35MS1:	DJNZ	R7,TIME35MS1
  502:	  121F	DE FC				DJNZ	R6,TIME35MS1
  503:	  1221	22				RET
  504:
  505:	  1222	7E 12		TIME5MS:	MOV	R6,#18
  506:	  1224	41 1B				AJMP	TIME35MS2
  507:
  508:	  1226	0D 0A 45 53	MSGMENU:	DB	13,10,"ESIM 8k - Menu",13,10
	  122A	49 4D 20 38
	  122E	6B 20 2D 20
	  1232	4D 65 6E 75
	  1236	0D 0A
  509:	  1238	44 20 2D 20			DB	"D - Download Intel-Hex to RAM",13,10
	  123C	44 6F 77 6E
	  1240	6C 6F 61 64
	  1244	20 49 6E 74
	  1248	65 6C 2D 48
	  124C	65 78 20 74
	  1250	6F 20 52 41
	  1254	4D 0D 0A
  510:	  1257	58 20 2D 20			DB	"X - Exit"
	  125B	45 78 69 74
  511:	  125F	0D 0A 00			DB	13, 10, 0
  512:
  513:	  1262	0D 0D 1F 9F	dnlds1: 	db	13,13,31,159," ascii",249,150,31,152,132,137
	  1266	20 61 73 63
	  126A	69 69 F9 96
	  126E	1F 98 84 89
  514:	  1272	2C 95 8C 80			db	",",149,140,128,160,13,14
	  1276	A0 0D 0E
  515:	  1279	0D 1F 8A A0	dnlds2: 	db	13,31,138,160,"ed",13,14
	  127D	65 64 0D 0E
  516:	  1281	0D 1F 8A C1	dnlds3: 	DB	13,31,138,193,"d",13,14
	  1285	64 0D 0E
  517:	  1288	53 75 6D 6D	dnlds4: 	DB	"Summary:",14
	  128C	61 72 79 3A
	  1290	0E
  518:	  1291	20 C6 73 91	dnlds5: 	DB	" ",198,"s",145,"d",14
	  1295	64 0E
  519:	  1297	20 8B 91 64	dnlds6a:	DB	" ",139,145,"d",14
	  129B	0E
  520:	  129C	20 8B 20 77	dnlds6b:	DB	" ",139," written",14
	  12A0	72 69 74 74

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 11



 Line  I  Addr  Code            Source

	  12A4	65 6E 0E
  521:	  12A7	1F 9B 3A 0E	dnlds7: 	DB	31,155,":",14
  522:	  12AB	20 8B 20 75	dnlds8: 	DB	" ",139," unable",128," write",14
	  12AF	6E 61 62 6C
	  12B3	65 80 20 77
	  12B7	72 69 74 65
	  12BB	0E
  523:	  12BC	20 20 62 61	dnlds9: 	DB	32,32,"bad",245,"s",14
	  12C0	64 F5 73 0E
  524:	  12C4	20 85 9F 96	dnlds10:	DB	" ",133,159,150,198,14
	  12C8	C6 0E
  525:	  12CA	20 85 84 9D	dnlds11:	DB	" ",133,132,157,14
	  12CE	0E
  526:	  12CF	20 85 20 6E	dnlds12:	DB	" ",133," non",132,157,14
	  12D3	6F 6E 84 9D
	  12D7	0E
  527:	  12D8	1F 97 9B 20	dnlds13:	DB	31,151,155," detected",13,14
	  12DC	64 65 74 65
	  12E0	63 74 65 64
	  12E4	0D 0E
  528:
  529:		N      007F	TEMP		EQU	127
  530:		N      00EC	dnld_parm	EQU	236
  531:
  532:						END





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 12





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6	  94
ACC				  DATA	      E0	  36
ASC2HEX				  NUMBER    0065	 134
AUTOBAUD			  NUMBER    0042	 121
AUXR				  DATA	      8E	  19
AUXR1				  DATA	      A2	  24
B				  DATA	      F0	  37
CIN				  NUMBER    0032	 107
CIN_FILTER			  NUMBER    0062	 133
COUT				  NUMBER    0030	 106
CPRL2				  BIT	      C8	  81
CT2				  BIT	      C9	  82
CY				  BIT	      D7	  95
DLND_SUM_DONE			  CODE	    11E9	 462
DNLD				  CODE	    107D	 209
DNLD0				  CODE	    1208	 485
DNLD1				  CODE	    1085	 215
DNLD2				  CODE	    108D	 219
DNLD2B				  CODE	    1092	 221
DNLD2D				  CODE	    10A4	 233
DNLD3				  CODE	    10A8	 237
DNLD3_B				  CODE	    10B4	 245
DNLD4				  CODE	    10C1	 251
DNLD5				  CODE	    10C3	 252
DNLDDLY2			  CODE	    1122	 327
DNLDER2				  CODE	    11B5	 434
DNLDER3				  CODE	    11C3	 442
DNLDGH1				  CODE	    1148	 371
DNLDGH2				  CODE	    1151	 374
DNLDGH3				  CODE	    1157	 377
DNLDGH4				  CODE	    115A	 378
DNLDGH5				  CODE	    1164	 383
DNLDGH6				  CODE	    116F	 388
DNLDGH7				  CODE	    1170	 389
DNLDGH8				  CODE	    117B	 393
DNLDGH9				  CODE	    1180	 395
DNLDGHA				  CODE	    118B	 400
DNLDGP2				  CODE	    1147	 359
DNLDIN2				  CODE	    1136	 344
DNLDS1				  CODE	    1262	 513
DNLDS10				  CODE	    12C4	 524
DNLDS11				  CODE	    12CA	 525
DNLDS12				  CODE	    12CF	 526
DNLDS13				  CODE	    12D8	 527
DNLDS2				  CODE	    1279	 515
DNLDS3				  CODE	    1281	 516
DNLDS4				  CODE	    1288	 517
DNLDS5				  CODE	    1291	 518

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 13



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
DNLDS6A				  CODE	    1297	 519
DNLDS6B				  CODE	    129C	 520
DNLDS7				  CODE	    12A7	 521
DNLDS8				  CODE	    12AB	 522
DNLDS9				  CODE	    12BC	 523
DNLD_DLY			  CODE	    1120	 322
DNLD_END			  CODE	    10F8	 293
DNLD_END_2			  CODE	    10FB	 296
DNLD_END_3			  CODE	    10FF	 299
DNLD_END_4			  CODE	    1111	 310
DNLD_ERR			  CODE	    11B3	 432
DNLD_ESC			  CODE	    1116	 316
DNLD_GET_CKSUM			  CODE	    10E1	 275
DNLD_GHEX			  CODE	    1148	 370
DNLD_GP				  CODE	    1137	 346
DNLD_I0				  CODE	    1202	 478
DNLD_I2				  CODE	    11F6	 472
DNLD_I3				  CODE	    1201	 476
DNLD_INC			  CODE	    1129	 332
DNLD_INIT			  CODE	    1206	 482
DNLD_ITEM			  CODE	    11F2	 469
DNLD_NOW			  CODE	    109D	 228
DNLD_PARM			  NUMBER    00EC	 530
DNLD_SUM			  CODE	    1193	 414
DNLD_SUMERR			  CODE	    10E6	 279
DNLD_UKN2			  CODE	    10F2	 288
DNLD_UNKNOWN			  CODE	    10EF	 285
DP0H				  DATA	      83	   9
DP0L				  DATA	      82	   8
DP1H				  DATA	      85	  11
DP1L				  DATA	      84	  10
DPH				  NUMBER    0083	 153
DPL				  NUMBER    0082	 152
EA				  BIT	      AF	  66
ERALL				  NUMBER    005C	 131
ES				  BIT	      AC	  64
ESC				  NUMBER    003E	 117
ET0				  BIT	      A9	  61
ET1				  BIT	      AB	  63
ET2				  BIT	      AD	  65
EX0				  BIT	      A8	  60
EX1				  BIT	      AA	  62
EXEN2				  BIT	      CB	  84
EXF2				  BIT	      CE	  87
EXTI0				  CODE	    0003	  98
EXTI1				  CODE	    0013	 100
F0				  BIT	      D5	  93
FIND				  NUMBER    005F	 132
GHEX				  NUMBER    003A	 113
GHEX16				  NUMBER    003C	 115
IE				  DATA	      A8	  26
IE0				  BIT	      89	  40
IE1				  BIT	      8B	  42
INITPORTS			  CODE	    1056	 183
INT0				  BIT	      B2	  69
INT1				  BIT	      B3	  70

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 14



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
IP				  DATA	      B8	  28
IT0				  BIT	      88	  39
IT1				  BIT	      8A	  41
LENSTR				  NUMBER    004A	 125
LOCAT				  NUMBER    1000	 155
MENU				  CODE	    1042	 174
MENUD				  CODE	    104B	 177
MENULOOP			  CODE	    1048	 176
MENUX				  CODE	    1052	 180
MISO				  BIT	      96	  50
MOSI				  BIT	      95	  49
MSGMENU				  CODE	    1226	 508
NEWLINE				  NUMBER    0048	 124
OV				  BIT	      D2	  90
P				  BIT	      D0	  89
P0				  DATA	      80	   6
P1				  DATA	      90	  20
P2				  DATA	      A0	  23
P3				  DATA	      B0	  27
PCON				  DATA	      87	  12
PCSTR				  NUMBER    0045	 122
PCSTR_H				  NUMBER    0045	 123
PHEX				  NUMBER    0034	 108
PHEX1				  NUMBER    002E	 105
PHEX16				  NUMBER    0036	 109
PINT16U				  NUMBER    0053	 128
PINT8				  NUMBER    0050	 127
PINT8U				  NUMBER    004D	 126
PRGM				  NUMBER    0059	 130
PS				  BIT	      BC	  79
PSTR				  NUMBER    0038	 110
PSW				  DATA	      D0	  35
PT0				  BIT	      B9	  76
PT1				  BIT	      BB	  78
PT2				  BIT	      BD	  80
PX0				  BIT	      B8	  75
PX1				  BIT	      BA	  77
R6R7TODPTR			  CODE	    1214	 493
RAMCE				  NUMBER    00B2	 141
RAMWE				  NUMBER    00B3	 142
RB8				  BIT	      9A	  54
RCAP2H				  DATA	      CB	  32
RCAP2L				  DATA	      CA	  31
RCLK				  BIT	      CD	  86
RD				  BIT	      B7	  74
REN				  BIT	      9C	  56
RESET				  CODE	    0000	  97
RI				  BIT	      98	  52
RS0				  BIT	      D3	  91
RS1				  BIT	      D4	  92
RXD				  BIT	      B0	  67
SBUF				  DATA	      99	  22
SCK				  BIT	      97	  51
SCON				  DATA	      98	  21
SIM				  NUMBER    00B4	 143
SINT				  CODE	    0023	 102

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 15



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
SM0				  BIT	      9F	  59
SM1				  BIT	      9E	  58
SM2				  BIT	      9D	  57
SMART_WR			  NUMBER    0056	 129
SP				  DATA	      81	   7
SPACE				  CODE	    120F	 490
T0				  BIT	      B4	  71
T1				  BIT	      B5	  72
T2				  BIT	      90	  47
T2CON				  DATA	      C8	  29
T2EX				  BIT	      91	  48
T2MOD				  DATA	      C9	  30
TB8				  BIT	      9B	  55
TCLK				  BIT	      CC	  85
TCON				  DATA	      88	  13
TEMP				  NUMBER    007F	 529
TF0				  BIT	      8D	  44
TF1				  BIT	      8F	  46
TF2				  BIT	      CF	  88
TH0				  DATA	      8C	  17
TH1				  DATA	      8D	  18
TH2				  DATA	      CD	  34
TI				  BIT	      99	  53
TIME35MS			  CODE	    1219	 499
TIME35MS1			  CODE	    121D	 501
TIME35MS2			  CODE	    121B	 500
TIME5MS				  CODE	    1222	 505
TIMER0				  CODE	    000B	  99
TIMER1				  CODE	    001B	 101
TIMER2				  CODE	    002B	 103
TL0				  DATA	      8A	  15
TL1				  DATA	      8B	  16
TL2				  DATA	      CC	  33
TMOD				  DATA	      89	  14
TR0				  BIT	      8C	  43
TR1				  BIT	      8E	  45
TR2				  BIT	      CA	  83
TXD				  BIT	      B1	  68
UPPER				  NUMBER    0040	 119
WDTRST				  DATA	      A6	  25
WR				  BIT	      B6	  73
WRITEADRHI			  CODE	    1065	 190
WRITEADRLO			  CODE	    1068	 193
WRITEDATA			  CODE	    106B	 196
WRITEHEX			  CODE	    1072	 202
